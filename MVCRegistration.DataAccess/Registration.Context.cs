//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCRegistration.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelDBEntities : DbContext
    {
        public HotelDBEntities()
            : base("name=HotelDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Hobby> Hobbies { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
    
        [DbFunction("HotelDBEntities", "NvarcharToIntList")]
        public virtual IQueryable<Nullable<int>> NvarcharToIntList(string inStr)
        {
            var inStrParameter = inStr != null ?
                new ObjectParameter("InStr", inStr) :
                new ObjectParameter("InStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[HotelDBEntities].[NvarcharToIntList](@InStr)", inStrParameter);
        }
    
        public virtual ObjectResult<string> GetHobbyList(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetHobbyList", userIdParameter);
        }
    
        public virtual ObjectResult<GetHobbyListByIDForEdit_Result> GetHobbyListByIDForEdit(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHobbyListByIDForEdit_Result>("GetHobbyListByIDForEdit", userIdParameter);
        }
    
        public virtual int LogErrorOccured(string type, string functionName, string inputData, string outputData, Nullable<int> userID, string groupType, string fullErrorDescription)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var functionNameParameter = functionName != null ?
                new ObjectParameter("FunctionName", functionName) :
                new ObjectParameter("FunctionName", typeof(string));
    
            var inputDataParameter = inputData != null ?
                new ObjectParameter("InputData", inputData) :
                new ObjectParameter("InputData", typeof(string));
    
            var outputDataParameter = outputData != null ?
                new ObjectParameter("OutputData", outputData) :
                new ObjectParameter("OutputData", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var groupTypeParameter = groupType != null ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(string));
    
            var fullErrorDescriptionParameter = fullErrorDescription != null ?
                new ObjectParameter("FullErrorDescription", fullErrorDescription) :
                new ObjectParameter("FullErrorDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogErrorOccured", typeParameter, functionNameParameter, inputDataParameter, outputDataParameter, userIDParameter, groupTypeParameter, fullErrorDescriptionParameter);
        }
    }
}
